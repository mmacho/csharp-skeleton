// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Aseme.HubSupplier.Shared.Infrastructure.Persistence.EntityFramework;

#nullable disable

namespace aseme_api.Migrations
{
    [DbContext(typeof(HubSuppliersDbContext))]
    [Migration("20230704105810_ModifiedAuditablleEntity")]
    partial class ModifiedAuditablleEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("aseme_api.Features.Functionalities.Domain.Functionality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Descripcion");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Funcionalidad");
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeterDetails", b =>
                {
                    b.Property<long>("OnlineMeterId")
                        .HasColumnType("bigint");

                    b.Property<int>("InstallationYear")
                        .HasColumnType("int")
                        .HasColumnName("InstallationYear");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Manufacturer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Model");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasColumnName("Period");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReadingDate");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SerialNumber");

                    b.HasKey("OnlineMeterId");

                    b.ToTable("OnlineMeterDetails");
                });

            modelBuilder.Entity("aseme_api.Features.RequestsLogs.Domain.RequestsLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityId");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionTime");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("HttpMethod");

                    b.Property<string>("HttpPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("HttpPath");

                    b.Property<string>("HttpQueryParams")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpQueryParams");

                    b.Property<string>("HttpRequestBody")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpRequestBody");

                    b.Property<string>("HttpRequestHeaders")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpRequestHeaders");

                    b.Property<string>("HttpResponseBody")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpResponseBody");

                    b.Property<string>("HttpResponseHeaders")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpResponseHeaders");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("int")
                        .HasColumnName("HttpStatusCode");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("IpAddress");

                    b.Property<DateTime>("ReceivedDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReceivedDateTime");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Scheme");

                    b.HasKey("Id");

                    b.ToTable("RequestsLog");
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcpDetails", b =>
                {
                    b.Property<long>("RestoreIcpId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExecutionDate");

                    b.Property<int>("RestoreIcpStatus")
                        .HasColumnType("int")
                        .HasColumnName("RestoreIcpStatus");

                    b.HasKey("RestoreIcpId");

                    b.ToTable("ResctoreIcpDetails");
                });

            modelBuilder.Entity("aseme_api.Features.Roles.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Descripcion");

                    b.HasKey("Id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("aseme_api.Features.RolesFunctionalities.Domain.RoleFunctionalities", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("IdRol");

                    b.Property<int>("FunctionalityId")
                        .HasColumnType("int")
                        .HasColumnName("IdFuncionalidad");

                    b.Property<int>("IsQueryable")
                        .HasColumnType("int")
                        .HasColumnName("EsConsultableActivaEntrante");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Valor");

                    b.HasKey("RoleId", "FunctionalityId");

                    b.HasIndex("FunctionalityId");

                    b.ToTable("RolFuncionalidad");
                });

            modelBuilder.Entity("aseme_api.Features.Shared.Operation.OperationBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Distributor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Distributor");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("BaseOperation");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("aseme_api.Features.Users.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorizedThirdPartyFilterMode")
                        .HasColumnType("int")
                        .HasColumnName("ModoFiltradoTercerosAutorizados");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAlta");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaBaja");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("EstaBorrado");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaModificacion");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Usuario");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("aseme_api.Features.UsersRoles.Domain.UserRoles", b =>
                {
                    b.Property<int>("LoginUserId")
                        .HasColumnType("int")
                        .HasColumnName("IdUsuarioLogin");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("IdRol");

                    b.HasKey("LoginUserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuarioRol");
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.HasBaseType("aseme_api.Features.Shared.Operation.OperationBase");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int")
                        .HasColumnName("OperationStatus");

                    b.Property<string>("SupplyPoint")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)")
                        .HasColumnName("SupplyPoint");

                    b.ToTable("OnlineMeter");
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.HasBaseType("aseme_api.Features.Shared.Operation.OperationBase");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int")
                        .HasColumnName("OperationStatus");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("SupplyPoint")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)")
                        .HasColumnName("SupplyPoint");

                    b.ToTable("RestoreIcp");
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeterDetails", b =>
                {
                    b.HasOne("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", "OnlineMeter")
                        .WithOne("OnlineMeterDetails")
                        .HasForeignKey("aseme_api.Features.OnlineMeters.Domain.OnlineMeterDetails", "OnlineMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineMeter");
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcpDetails", b =>
                {
                    b.HasOne("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", "RestoreIcp")
                        .WithOne("RestoreIcpDetails")
                        .HasForeignKey("aseme_api.Features.RestoreIcps.Domain.RestoreIcpDetails", "RestoreIcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestoreIcp");
                });

            modelBuilder.Entity("aseme_api.Features.RolesFunctionalities.Domain.RoleFunctionalities", b =>
                {
                    b.HasOne("aseme_api.Features.Functionalities.Domain.Functionality", "Functionality")
                        .WithMany("Roles")
                        .HasForeignKey("FunctionalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aseme_api.Features.Roles.Domain.Role", "Role")
                        .WithMany("Functionalities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Functionality");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("aseme_api.Features.UsersRoles.Domain.UserRoles", b =>
                {
                    b.HasOne("aseme_api.Features.Users.Domain.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("LoginUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aseme_api.Features.Roles.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.HasOne("aseme_api.Features.Shared.Operation.OperationBase", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.HasOne("aseme_api.Features.Shared.Operation.OperationBase", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.Features.Functionalities.Domain.Functionality", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("aseme_api.Features.Roles.Domain.Role", b =>
                {
                    b.Navigation("Functionalities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("aseme_api.Features.Users.Domain.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.Navigation("OnlineMeterDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.Navigation("RestoreIcpDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
