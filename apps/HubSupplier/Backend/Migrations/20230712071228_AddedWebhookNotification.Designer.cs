// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aseme_api.Infrastructure.Contexts;

#nullable disable

namespace aseme_api.Migrations
{
    [DbContext(typeof(HubSuppliersDbContext))]
    [Migration("20230712071228_AddedWebhookNotification")]
    partial class AddedWebhookNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.HttpLogs.Domain.HttpLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityId");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionTime");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("HttpMethod")
                        .HasAnnotation("ErrorMessage", "HttpMethod is required");

                    b.Property<string>("HttpPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("HttpPath")
                        .HasAnnotation("ErrorMessage", "HttpPath is required");

                    b.Property<string>("HttpQueryParams")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpQueryParams");

                    b.Property<string>("HttpRequestBody")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpRequestBody");

                    b.Property<string>("HttpRequestHeaders")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpRequestHeaders");

                    b.Property<string>("HttpResponseBody")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpResponseBody");

                    b.Property<string>("HttpResponseHeaders")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("HttpResponseHeaders");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("int")
                        .HasColumnName("HttpStatusCode")
                        .HasAnnotation("ErrorMessage", "HttpStatusCode is required");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("IpAddress");

                    b.Property<DateTime>("ReceivedDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReceivedDateTime")
                        .HasAnnotation("ErrorMessage", "ReceivedDateTime is required");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Scheme")
                        .HasAnnotation("ErrorMessage", "Scheme is required");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("HttpStatusCode");

                    b.HasIndex("IpAddress");

                    b.HasIndex("ReceivedDateTime");

                    b.ToTable("HttpLog", (string)null);
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeterDetails", b =>
                {
                    b.Property<long>("OnlineMeterId")
                        .HasColumnType("bigint");

                    b.Property<int>("InstallationYear")
                        .HasColumnType("int")
                        .HasColumnName("InstallationYear");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Manufacturer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Model");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasColumnName("Period");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReadingDate");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SerialNumber");

                    b.HasKey("OnlineMeterId");

                    b.HasIndex("Manufacturer");

                    b.HasIndex("ReadingDate");

                    b.HasIndex("SerialNumber");

                    b.ToTable("OnlineMeterDetails", (string)null);
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcpDetails", b =>
                {
                    b.Property<long>("RestoreIcpId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Description")
                        .HasAnnotation("RequiredErrorMessage", "Description is required");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExecutionDate")
                        .HasAnnotation("RequiredErrorMessage", "ExecutionDate is required");

                    b.Property<int>("RestoreIcpStatus")
                        .HasColumnType("int")
                        .HasColumnName("RestoreIcpStatus")
                        .HasAnnotation("RequiredErrorMessage", "RestoreIcpStatus is required");

                    b.HasKey("RestoreIcpId");

                    b.HasIndex("ExecutionDate");

                    b.HasIndex("RestoreIcpStatus");

                    b.ToTable("ResctoreIcpDetails", (string)null);
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.Shared.Notification.BaseNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SentState")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityType");

                    b.HasIndex("SentState");

                    b.ToTable("BaseNotification", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.Shared.Operation.BaseOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Distributor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Distributor")
                        .HasAnnotation("RequiredErrorMessage", "Distributor is required");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("Distributor");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("BaseOperation", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.EmailNotifications.Domain.EmailNotification", b =>
                {
                    b.HasBaseType("aseme_api.CoreApp.Features.HubSuppliers.Shared.Notification.BaseNotification");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("EmailAddress")
                        .HasAnnotation("RequiredErrorMessage", "EmailAddress is required");

                    b.HasIndex("EmailAddress");

                    b.ToTable("EmailNotification", (string)null);
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.WebhookNotifications.Domain.WebhookNotification", b =>
                {
                    b.HasBaseType("aseme_api.CoreApp.Features.HubSuppliers.Shared.Notification.BaseNotification");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("Url")
                        .HasAnnotation("RequiredErrorMessage", "Url is required");

                    b.HasIndex("Url");

                    b.ToTable("WebhookNotification", (string)null);
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.HasBaseType("aseme_api.CoreApp.Features.HubSuppliers.Shared.Operation.BaseOperation");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int")
                        .HasColumnName("OperationStatus")
                        .HasAnnotation("RequiredErrorMessage", "SupplyPoint is required");

                    b.Property<string>("SupplyPoint")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)")
                        .HasColumnName("SupplyPoint")
                        .HasAnnotation("RegularExpression", "[A-Z0-9]{1,22}")
                        .HasAnnotation("RequiredErrorMessage", "SupplyPoint is required");

                    b.HasIndex("OperationStatus");

                    b.HasIndex("SupplyPoint");

                    b.ToTable("OnlineMeter", (string)null);
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.HasBaseType("aseme_api.CoreApp.Features.HubSuppliers.Shared.Operation.BaseOperation");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int")
                        .HasColumnName("OperationStatus")
                        .HasAnnotation("RequiredErrorMessage", "OperationStatus is required");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("SupplyPoint")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)")
                        .HasColumnName("SupplyPoint")
                        .HasAnnotation("RegularExpression", "[A-Z0-9]{1,22}")
                        .HasAnnotation("RequiredErrorMessage", "SupplyPoint is required");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("SupplyPoint");

                    b.ToTable("RestoreIcp", (string)null);
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeterDetails", b =>
                {
                    b.HasOne("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeter", "OnlineMeter")
                        .WithOne("OnlineMeterDetails")
                        .HasForeignKey("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeterDetails", "OnlineMeterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OnlineMeter");
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcpDetails", b =>
                {
                    b.HasOne("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcp", "RestoreIcp")
                        .WithOne("RestoreIcpDetails")
                        .HasForeignKey("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcpDetails", "RestoreIcpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RestoreIcp");
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.EmailNotifications.Domain.EmailNotification", b =>
                {
                    b.HasOne("aseme_api.CoreApp.Features.HubSuppliers.Shared.Notification.BaseNotification", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.CoreApp.Features.HubSuppliers.EmailNotifications.Domain.EmailNotification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.WebhookNotifications.Domain.WebhookNotification", b =>
                {
                    b.HasOne("aseme_api.CoreApp.Features.HubSuppliers.Shared.Notification.BaseNotification", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.CoreApp.Features.HubSuppliers.WebhookNotifications.Domain.WebhookNotification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.HasOne("aseme_api.CoreApp.Features.HubSuppliers.Shared.Operation.BaseOperation", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.HasOne("aseme_api.CoreApp.Features.HubSuppliers.Shared.Operation.BaseOperation", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcp", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.Navigation("OnlineMeterDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.CoreApp.Features.HubSuppliers.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.Navigation("RestoreIcpDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
