// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Aseme.HubSupplier.Shared.Infrastructure.Persistence.EntityFramework;

#nullable disable

namespace aseme_api.Migrations
{
    [DbContext(typeof(HubSuppliersDbContext))]
    [Migration("20230530145113_AddedRestoreIcp")]
    partial class AddedRestoreIcp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeterDetails", b =>
                {
                    b.Property<long>("OnlineMeterId")
                        .HasColumnType("bigint");

                    b.Property<int>("InstallationYear")
                        .HasColumnType("int")
                        .HasColumnName("InstallationYear");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Manufacturer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Model");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasColumnName("Period");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReadingDate");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SerialNumber");

                    b.HasKey("OnlineMeterId");

                    b.ToTable("OnlineMeterDetails");
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcpDetails", b =>
                {
                    b.Property<long>("RestoreIcpId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExecutionDate");

                    b.Property<int>("RestoreIcpStatus")
                        .HasColumnType("int")
                        .HasColumnName("RestoreIcpStatus");

                    b.HasKey("RestoreIcpId");

                    b.ToTable("ResctoreIcpDetails");
                });

            modelBuilder.Entity("aseme_api.Features.Shared.Operation.OperationBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Distributor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Distributor");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("BaseOperation");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.HasBaseType("aseme_api.Features.Shared.Operation.OperationBase");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int")
                        .HasColumnName("OperationStatus");

                    b.Property<string>("SupplyPoint")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)")
                        .HasColumnName("SupplyPoint");

                    b.ToTable("OnlineMeter");
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.HasBaseType("aseme_api.Features.Shared.Operation.OperationBase");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int")
                        .HasColumnName("OperationStatus");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("SupplyPoint")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)")
                        .HasColumnName("SupplyPoint");

                    b.ToTable("RestoreIcp");
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeterDetails", b =>
                {
                    b.HasOne("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", "OnlineMeter")
                        .WithOne("OnlineMeterDetails")
                        .HasForeignKey("aseme_api.Features.OnlineMeters.Domain.OnlineMeterDetails", "OnlineMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineMeter");
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcpDetails", b =>
                {
                    b.HasOne("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", "RestoreIcp")
                        .WithOne("ResctoreIcpDetails")
                        .HasForeignKey("aseme_api.Features.RestoreIcps.Domain.RestoreIcpDetails", "RestoreIcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestoreIcp");
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.HasOne("aseme_api.Features.Shared.Operation.OperationBase", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.HasOne("aseme_api.Features.Shared.Operation.OperationBase", null)
                        .WithOne()
                        .HasForeignKey("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.Features.OnlineMeters.Domain.OnlineMeter", b =>
                {
                    b.Navigation("OnlineMeterDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("aseme_api.Features.RestoreIcps.Domain.RestoreIcp", b =>
                {
                    b.Navigation("ResctoreIcpDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
